#MIN_CONFIG
AC_PREREQ(2.50)
AC_LANG_CPLUSPLUS
AM_INIT_AUTOMAKE(sim,0.9.4)
AC_PROG_LIBTOOL
AC_STDC_HEADERS
AC_C_BIGENDIAN
LEX=""
AC_PATH_PROG(LEX, flex, no)
if test "x$LEX" = "xno" ; then
   AC_PATH_PROG(LEX, lex, no)
   if text "x$LEX" = "xno" ; then
      AC_MSG_ERROR([lex or flex not found!])
   fi
fi
AM_PROG_LEX
AM_CONDITIONAL(QT2, test "$kde_qtver" = "2")
if test "$kde_qtver" = "2" ; then
 LIBUIQT="../../sim/ui/qt3/libsimuiqt.la"
 LIBUI="../../sim/ui/libsimui.la ../../sim/ui/qt3/libsimuiqt.la"
else
 LIBUIQT=""
 LIBUI="../../sim/ui/libsimui.la"
fi
AC_SUBST(LIBUIQT)
AC_SUBST(LIBUI)
LFLAGS="-o${LEX_OUTPUT_ROOT}.c"
AC_SUBST(LFLAGS)
if test "$CYGWIN" = "yes"; then
 LDFLAGS="$LDFLAGS --enable-auto-import"
fi
if ! echo $CXXFLAGS | fgrep '-fno-strict-aliasing' >/dev/null 2>&1 ; then 
	old_cxxflags=$CXXFLAGS 
    CXXFLAGS="$CXXFLAGS -fno-strict-aliasing" 
    AC_TRY_COMPILE([], [return 0;], , CXXFLAGS=$old_cxxflags) 
fi 
RELEASE_BUILD="no"
AC_ARG_ENABLE(
 release,
 [  --enable-release        enable release build],
 RELEASE_BUILD="$enableval")
if test "$RELEASE_BUILD" != "yes"; then
 AC_DEFINE(CVS_BUILD, 1, [CVS build])
fi

AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_UID_T
AC_STRUCT_TM
AC_PATH_X
AC_HEADER_SYS_WAIT
AC_TM_GMTOFF
AC_FUNC_FORK
AC_C_INLINE
AC_C_CONST
KDE_CHECK_SSL
AC_HEADER_STDBOOL
AC_FUNC_ERROR_AT_LINE
AC_FUNC_MMAP
AC_FUNC_MKTIME
AC_FUNC_MEMCMP
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_STAT

AC_LIB_LTDL

AC_CHECK_HEADERS([arpa/inet.h netinet/in.h sys/ioctl.h sys/socket.h])
AC_CHECK_HEADERS([fcntl.h limits.h netdb.h stddef.h termios.h])

AC_CHECK_FUNCS([dup2 gethostbyname gethostname inet_ntoa])
AC_CHECK_FUNCS([memset mkdir munmap rmdir socket])
AC_CHECK_FUNCS([strcspn strdup strerror strstr strtol strtoul])

AC_CHECK_FUNC(strcasecmp,[AC_DEFINE(HAVE_STRCASECMP,1,[Have strcasecmp])])
AC_CHECK_FUNC(umask,[AC_DEFINE(HAVE_UMASK,1,[Have umask])])
AC_CHECK_FUNC(chmod,[AC_DEFINE(HAVE_CHMOD,1,[Have chmod])])
AC_CHECK_FUNC(gethostbyname_r,[AC_DEFINE(HAVE_GETHOSTBYNAME_R,1,[Have gethostbyname_r])]) 
AC_CHECK_FUNC(gethostbyaddr_r,[AC_DEFINE(HAVE_GETHOSTBYADDR_R,1,[Have gethostbyaddr_r])])

AC_EGREP_HEADER(in_addr_t, netinet/in.h,, AC_DEFINE(in_addr_t,int,[defaults in_addr_t to int]))
AC_EGREP_HEADER(socklen_t, sys/socket.h,, AC_DEFINE(socklen_t,int,[defaults socklen_t to int]))

AC_CHECK_LIB(xnet,inet_addr)
AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(art_lgpl_2,libart_version)

EXTRA_LIBS=""
if test "$use_kde" = "yes" ; then
KDE_CHECK_HEADER(ktextedit.h,[AC_DEFINE(HAVE_KTEXTEDIT_H,1,[Have ktextedit.h])])
KDE_CHECK_HEADER(kwallet.h,[AC_DEFINE(HAVE_KWALLET_H,1,[Have kwallet.h])])
fi
KDE_CHECK_HEADER(qsyntaxhighlighter.h,[AC_DEFINE(HAVE_QSYNTAXHIGHLIGHTER_H,1,[Have qsyntaxhighlighter.h])])
AC_DEFINE_UNQUOTED(PREFIX, "$prefix", [Install prefix])
AC_DEFINE(USE_QT,1,[Use QT - need for libicq])
AC_SUBST(EXTRA_LIBS)
sim_plugindir="\${prefix}/lib/sim"
sim_stylesdir="\${prefix}/lib/sim/styles"
AC_SUBST(sim_plugindir)
AC_SUBST(sim_stylesdir)
AC_DEFINE_UNQUOTED(PLUGIN_PATH,"${prefix}/lib/sim",[Plugins path])

LIB_XML2=""
AC_PATH_PROG(XML2_CONFIG, xml2-config, no)
if test "x$XML2_CONFIG" = "xno" ; then
   AC_MSG_ERROR([Executable xml2-config not found!
Seems you have no libxml2 devel files installed.
You can download it from http://xmlsoft.org/download.html
])
fi

LIB_XML2=`$XML2_CONFIG --libs 2>/dev/null`
CPPFLAGS="$CPPFLAGS `$XML2_CONFIG --cflags`"

LIB_XSLT=""
AC_PATH_PROG(XSLT_CONFIG, xslt-config, no)
if test "x$XSLT_CONFIG" = "xno" ; then
   AC_MSG_ERROR([Executable xslt-config not found!
Seems you have no libxslt devel files installed.
You can download it from http://xmlsoft.org/download.html
])
fi

LIB_XSLT=`$XSLT_CONFIG --libs 2>/dev/null`
CPPFLAGS="$CPPFLAGS `$XSLT_CONFIG --cflags`"

AC_SUBST(LIB_XML2)
AC_SUBST(LIB_XSLT)

uname=`uname`
unamem=`uname -m`
AC_DEFINE_UNQUOTED(UNAME,"${uname} ${unamem}",[System type])

if test "$have_ssl" != yes; then
  echo ""
  echo "OpenSSL support is not available.  SIM will not be able to"
  echo "establish secure communication channels. This is not required"
  echo "for proper function (i.e. it is optional). If you really desire this"
  echo "functionality then install OpenSSL (libraries and headers) and"
  echo "rebuild SIM.  OpenSSL can be found at http://www.openssl.org"
  echo "or as RPM from your local distribution site."
fi

